
// In this variation both players need to be next to each other on the same host / device.

struct columns {
    columns: list<list<integer>>;
}

entity game {
    key id: text;
    mutable field: byte_array;
}

operation init_game(id: text) {
    require(game@?{id} == null); //Refactor to use query
    val default_col = [0,0,0,0,0,0];
    create game(id, columns([default_col,default_col,default_col,default_col,default_col,default_col,default_col]).to_bytes());
}

operation set_token(id: text, col: integer) {
    val game = game@?{id};
    require(game);
    
    val field = columns.from_bytes(game.field).columns;
    val column = field[col];
    for (i in range(6)) {
        val token = column[i];
        if (token == 0){
            column[i] = 1;
            break;
        }
    }
    
    val fieldRaw = columns(field).to_bytes();
    update game @ {.id == id} (fieldRaw);
}

query getGame(id: text): columns{
    val currentGame = game@?{id};
    if (currentGame != null){
        return columns.from_bytes(currentGame.field);
    } else {
        return columns([[0]]);
    }
}