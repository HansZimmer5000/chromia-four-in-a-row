
// In this variation both players need to be next to each other on the same host / device.

struct columns {
    cols: list<list<integer>>;
}

entity game {
    key id: text;
    mutable field: byte_array;
}

query getGameFieldWithNullCheck(id: text): columns {
    val game = game@?{id};
    require(game); //TODO require forbidden in query?
    print("AA");
    val field = columns([[0]]);
    return field;
}

operation init_game(id: text) {
    require(game@?{id} == null); //Refactor to use query
    val default_col = [0,0,0,0,0,0];
    val empty_columns = columns([default_col,default_col,default_col,default_col,default_col,default_col,default_col]).to_bytes();
    create game(id, empty_columns);
}

operation set_token(id: text, col: integer) {
    val game = game@?{id};
    require(game);
    print("AA");
    val field: columns = columns([[0]]);
    var column: list<integer> = field.cols[col];
    
    // TODO check if column is full
    for (i in range(6)) {
        val token = column[i];
        print(i);
        if (token == 0){
            column[i] = 1;
            print("SET");
            break;
        }
    }

    field.cols[col] = column; // TODO Check ifthis really changes field
    print("BB");
    
    val fieldRaw = field.to_bytes();
    print(field);
    update game @ {.id == id} (fieldRaw);
}

