// In this variation both players need to be next to each other on the same host / device.

struct columns {
    cols: list<list<integer>>;
}

entity game {
    key id: text;
    mutable field: byte_array;
}

operation init_game(id: text) {
    require(game@?{id} == null); //Refactor to use query
    val default_col = [0,0,0,0,0,0];
    val empty_columns = columns([default_col,default_col,default_col,default_col,default_col,default_col,default_col]).to_bytes();
    create game(id, empty_columns);
}

operation set_token(id: text, col: integer) {
    val game = game@?{id};
    require(game);
    
    val field: columns = convert_to_columns(game.field);
    var column: list<integer> = field.cols[col];
    
    var (updated_column, token_was_set) = set_token_in_column_if_possible(column);
    print(token_was_set);

    field.cols[col] = updated_column; // TODO Check if this really changes field
    
    val fieldRaw = field.to_bytes();
    print(field);
    update game @ {.id == id} (fieldRaw);
}

query set_token2(id: text, col: integer): columns {
    val game = game@?{id};
    require(game);
    
    val field: columns = convert_to_columns(game.field);
    var column: list<integer> = field.cols[col];
    
    var (updated_column, token_was_set) = set_token_in_column_if_possible(column);
    print(token_was_set);

    field.cols[col] = updated_column; // TODO Check if this really changes field
    
    return field;
}

query get_game(id: text): game {
    return game@?{id};
}

function set_token_in_column_if_possible(column: list<integer>): (list<integer>,boolean) {
    var token_was_set: boolean = false;
    for (i in range(6)) {
        val token = column[i];
        if (token == 0){
            column[i] = 1;
            token_was_set = true;
            break;
        }
    }
    val updated_column = column;
    return (updated_column, token_was_set);
}

query get_field(id: text): columns{
    var game = game@?{id};
    require(game);
    val field: columns = convert_to_columns(game.field);
    return field;
}

function convert_to_columns(raw_field: byte_array): columns{
    return columns.from_bytes(raw_field);
}